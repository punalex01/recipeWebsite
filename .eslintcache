[{"/Users/alexpun/Desktop/website/recipe/recipe/src/index.js":"1","/Users/alexpun/Desktop/website/recipe/recipe/src/serviceWorker.js":"2","/Users/alexpun/Desktop/website/recipe/recipe/src/App.js":"3","/Users/alexpun/Desktop/website/recipe/recipe/src/AddRecipePage.js":"4","/Users/alexpun/Desktop/website/recipe/recipe/src/DisplayRecipePage.js":"5","/Users/alexpun/Desktop/website/recipe/recipe/src/SideBar.js":"6","/Users/alexpun/Desktop/website/recipe/recipe/src/DisplayRecipeImage.js":"7"},{"size":503,"mtime":1598913444619,"results":"8","hashOfConfig":"9"},{"size":5086,"mtime":1598913444620,"results":"10","hashOfConfig":"9"},{"size":6671,"mtime":1609647008516,"results":"11","hashOfConfig":"9"},{"size":11779,"mtime":1609638860507,"results":"12","hashOfConfig":"9"},{"size":2029,"mtime":1609551060813,"results":"13","hashOfConfig":"9"},{"size":1722,"mtime":1602287791678,"results":"14","hashOfConfig":"9"},{"size":320,"mtime":1609644879743,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"oiskto",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/alexpun/Desktop/website/recipe/recipe/src/index.js",[],["34","35"],"/Users/alexpun/Desktop/website/recipe/recipe/src/serviceWorker.js",[],"/Users/alexpun/Desktop/website/recipe/recipe/src/App.js",[],"/Users/alexpun/Desktop/website/recipe/recipe/src/AddRecipePage.js",["36"],"import React from 'react';\n\nfunction AddRecipePage({deleteRecipe, submitRecipe, recipe}) {\n    // pass in empty object if add new recipe with ID = -1\n    // pass in existing object if editing existing recipe\n\n    const [recipeImg, changeImg] = React.useState();\n\n    // get recipe from form\n    const getNewRecipe = () => {\n        let recipeFormData = new FormData();\n        let newRecipe = {};\n        newRecipe.name = document.getElementById(\"nameInput\").value;\n        newRecipe.preptime = document.getElementById(\"prepTime\").value;\n        newRecipe.cooktime = document.getElementById(\"cookTime\").value;\n        newRecipe.serves = document.getElementById(\"serves\").value;\n\n        // get ingredients\n        let newIngredients = {}\n        Array.from(document.getElementsByClassName(\"ingredientPairInput\")).forEach((element) => {\n            newIngredients[element.getElementsByClassName(\"ingredientInput\")[0].value] = element.getElementsByClassName(\"ingredientAmountInput\")[0].value;\n        })\n        newRecipe.ingredients = newIngredients;\n\n        newRecipe.instructions = [];\n        Array.from(document.getElementsByClassName(\"instructionItem\")).forEach((element) => {\n            newRecipe.instructions.push(element.getElementsByClassName(\"instructionInput\")[0].value);\n        })\n\n        newRecipe.id = recipe.id;\n        // recipeFormData.append(\"id\", recipe.id);\n        recipeFormData.append(\"recipe\", JSON.stringify(newRecipe));\n        recipeFormData.append(\"img\", recipeImg);\n\n        for (let i of recipeFormData.entries()) {\n            console.log(i);\n        }\n        submitRecipe(recipeFormData);\n    }\n\n    const submitForm = (event) => {\n        event.preventDefault();\n        getNewRecipe();\n    }\n\n    let deleteButton;\n    // need this function to prevent firing function on render\n    const deleteExistingRecipe = () => {\n        deleteRecipe(recipe.id);\n    }\n    if (recipe.id !== -1) {\n        deleteButton = <button type=\"button\" className=\"button\" id=\"deleteButton\" onClick={deleteExistingRecipe}>Delete Recipe</button>\n    }\n\n    return (\n      <div className=\"addRecipePage\">\n        <span className=\"title\">New Recipe</span>\n        {deleteButton}\n\n        <form className=\"addRecipeForm\" id = \"editRecipeForm\" onSubmit={submitForm}>\n            \n            <AddName name={recipe.name}/>\n            <AddPicture changeImg={changeImg}/>\n            <AddTimeServings preptime={recipe.preptime} cooktime={recipe.cooktime} serves={recipe.serves}/>\n    \n            <AddIngredients ingredientList={Object.entries(recipe.ingredients)}/>\n    \n            <AddInstructions instructionList={recipe.instructions}/>\n\n            <br></br>\n            <button type=\"submit\" className=\"submitButton button\" id=\"submitButton\">Submit Recipe</button>\n        </form>\n      </div>\n    )\n}\n\nfunction AddName ({name}) {\n    React.useEffect(() => {\n        changeName(name);\n    }, [name])\n\n    // control state of name input\n    const [nameState, changeName] = React.useState(name);\n\n    const handleChange = event => {\n        changeName(event.target.value);\n    }\n\n    return (\n        <div>\n            <label>Name</label>\n            <input type=\"text\" className=\"newRecipeInput\" id=\"nameInput\" value={nameState} onChange={handleChange} required/>\n        </div>\n\n    )\n}\n\nfunction AddPicture({changeImg}) {\n    const setImg = e => {\n        let imageFile = new File([e.target.files[0]], \"img\");\n        changeImg(imageFile);\n    }\n\n    return (\n        <div>\n            <label for=\"img\">Picture:</label>\n            <input type=\"file\" id=\"img\" name=\"recipeImg\" accept=\"image/*\" onChange={setImg}/>\n        </div>\n\n    )\n}\n\nfunction AddTimeServings ({preptime, cooktime, serves}) {\n    React.useEffect(() => {\n        changePreptime(preptime);\n        changeCooktime(cooktime);\n        changeServings(serves);\n    }, [preptime, cooktime, serves]);\n\n    // control state of inputs\n    const [preptimeInputState, changePreptime] = React.useState(preptime);\n\n    const inputPreptime = (event) => {\n        changePreptime(event.target.value);\n    }\n\n    const [cooktimeInputState, changeCooktime] = React.useState(cooktime);\n\n    const inputCooktime = (event) => {\n        changeCooktime(event.target.value);\n    }\n\n    const [servingsInputState, changeServings] = React.useState(serves);\n\n    const inputServings = (event) => {\n        changeServings(event.target.value);\n    }\n\n    return (\n        <div className=\"smallInputs\">\n            <label>Prep Time:</label>\n            <input type = \"text\" className = \"newRecipeInput\" value={preptimeInputState} onChange={inputPreptime} id =\"prepTime\" required/>\n  \n            <label>Cook Time:</label>\n            <input type = \"text\" className = \"newRecipeInput\" value={cooktimeInputState} onChange={inputCooktime} id =\"cookTime\" required/>\n  \n            <label>Serves:</label>\n            <input type = \"text\" className = \"newRecipeInput\" value={servingsInputState} onChange={inputServings} id =\"serves\" required/>\n        </div>\n    )\n}\n  \nfunction AddIngredients ({ingredientList}) {\n    React.useEffect(() => {\n        changeIngredientList(ingredientList);\n    }, []);\n\n    // control number of ingredient inputs\n    const [ingredientListState, changeIngredientList] = React.useState(ingredientList);\n\n    const addNewIngredient = () => {\n        changeIngredientList([...ingredientListState, [\"Ingredient \" + (ingredientListState.length+1).toString(), \"\"]]);\n    }\n\n    const removeIngredientPair = (event) => {\n        if (ingredientListState.length > 1)\n        {\n            let tempList = [...ingredientListState];\n            tempList.splice(event.target.getAttribute('keyvalue'), 1);\n            changeIngredientList(tempList);\n        }\n        else\n            return;\n    }\n\n    const ingredientNameInput = (ingredientName, ingredientNum) => {\n        let tempList = [...ingredientListState];\n        tempList[ingredientNum][0] = ingredientName;\n    }\n\n    const ingredientAmountInput = (ingredientAmount, ingredientNum) => {\n        let tempList = [...ingredientListState];\n        tempList[ingredientNum][1] = ingredientAmount;\n    }\n\n    return (\n        <div className=\"ingredientsContainer\">\n            <span>Ingredient</span>\n            <span>Amount</span>\n            <IngredientInputList ingredientList={ingredientListState} removeIngredientPair={removeIngredientPair} \n                                 ingredientNameInput={ingredientNameInput} ingredientAmountInput={ingredientAmountInput}/>\n            <br></br>\n            <button type=\"button\" onClick={addNewIngredient}>New Ingredient</button>\n        </div>\n    )\n}\n\nfunction IngredientInputList ({ingredientList, removeIngredientPair, ingredientNameInput, ingredientAmountInput}) {\n    return (\n        ingredientList.map((item) => {\n            const keyValue = ingredientList.indexOf(item);\n            return <IngredientPairInput key={keyValue} keyValue={keyValue} ingredientName={item[0]} \n                                        ingredientAmount={item[1]} removeIngredientPair={removeIngredientPair} \n                                        ingredientNameInput={ingredientNameInput} ingredientAmountInput={ingredientAmountInput}/>\n        })\n    )\n}\n\nfunction IngredientPairInput ({keyValue, ingredientName, ingredientAmount, removeIngredientPair, ingredientNameInput, ingredientAmountInput}) {\n    React.useEffect(() => {\n        changeIngredientName(ingredientName);\n        changeIngredientAmount(ingredientAmount);\n    }, [ingredientName, ingredientAmount]);\n\n    const [ingredientNameInputState, changeIngredientName] = React.useState(ingredientName || \"\");\n\n    const inputIngredientName = (event) => {\n        changeIngredientName(event.target.this);\n        ingredientNameInput(event.target.value, keyValue);\n    }\n\n    const [ingredientAmountInputState, changeIngredientAmount] = React.useState(ingredientAmount || \"\");\n\n    const inputIngredientAmount = (event) => {\n        changeIngredientAmount(event.target.this);\n        ingredientAmountInput(event.target.value, keyValue);\n    }\n\n    return (\n        <div className=\"ingredientPairInput\">\n            <input type = \"text\" className = \"newRecipeInput ingredientInput\" value={ingredientNameInputState} onChange={inputIngredientName} required/>\n            <input type = \"text\" className = \"newRecipeInput ingredientAmountInput\" value={ingredientAmountInputState} onChange={inputIngredientAmount}required/>\n            <button type=\"button\" className=\"removeButton\" keyvalue={keyValue} onClick={removeIngredientPair}>X Remove Ingredient</button>\n        </div>\n        )\n}\n\nfunction AddInstructions ({instructionList}) {\n    // set to array of arrays to track each item by reference\n    React.useEffect(() => {\n        let tempList = [];\n        instructionList.forEach((item) => {\n            tempList.push([item]);\n        });\n        changeInstructionList(tempList);\n    }, [instructionList]);\n\n    const [instructionListState, changeInstructionList] = React.useState(instructionList);\n\n    const addNewInstruction = () => {\n        changeInstructionList([...instructionListState, [\"Instruction \" + (instructionListState.length+1).toString()]]);\n        console.log(instructionListState);\n    }\n\n    const editInstructionInput = (instruction, instructionNum) => {\n        let tempList = [...instructionListState];\n        tempList[instructionNum][0] = instruction;\n        console.log(tempList);\n        changeInstructionList(tempList);\n    }\n\n    const removeInstruction = (event) => {\n        if (instructionListState.length > 1)\n        {\n            let tempList = [...instructionListState];\n            tempList.splice(event.target.getAttribute('keyvalue'), 1);\n            changeInstructionList(tempList);\n        }\n        else\n            return;\n    }\n\n    return (\n        <div className=\"instructionsContainer\">\n            <span id=\"instructionHeader\">Instructions:</span>\n            <InstructionInputList instructionList={instructionListState} removeInstruction={removeInstruction} \n                                  editInstructionInput={editInstructionInput}/>\n            <button type=\"button\" onClick={addNewInstruction}>New Instruction</button>\n        </div>\n    )\n}\n\nfunction InstructionInputList ({instructionList, inputInstruction, removeInstruction, editInstructionInput}) {\n    return (\n        instructionList.map(instruction => <InstructionItem key={instructionList.indexOf(instruction)} \n                                                    instructNum={instructionList.indexOf(instruction)}\n                                                    instruction={instruction} instructionList={instructionList} \n                                                    changeInput={inputInstruction} removeInstruction={removeInstruction}\n                                                    editInstructionInput={editInstructionInput}/>)\n        )\n}\n\nfunction InstructionItem ({instructNum, instruction, removeInstruction, editInstructionInput}) {\n    React.useEffect(() => {\n        changeInstructionValue(instruction);\n    }, [instruction]);\n\n    const [instructionValueState, changeInstructionValue] = React.useState(instruction);\n\n    const inputInstruction = (event) => {\n        changeInstructionValue(event.target.value);\n        editInstructionInput(event.target.value, instructNum);\n    }\n\n    return (\n    <div className=\"instructionItem\">\n        <span>{instructNum+1}.</span>\n        <br></br>\n        <textarea className=\"instructionInput\" value={instructionValueState} onChange={inputInstruction} required></textarea>\n        <br></br>\n        <button type=\"button\" className=\"removeButton\" keyvalue={instructNum} onClick={removeInstruction}>X Remove Instruction</button>\n    </div>\n    )\n}\n\nexport default AddRecipePage;\n","/Users/alexpun/Desktop/website/recipe/recipe/src/DisplayRecipePage.js",[],"/Users/alexpun/Desktop/website/recipe/recipe/src/SideBar.js",["37"],"import React from 'react';\n\n// controls search and listing recipes\nfunction SideBar({clickedAddRecipe, recipeNameIdList, selectRecipe, getRecipes}) {\n\n  React.useEffect(() => {\n    getRecipes();\n  }, [recipeNameIdList]);\n\n    const [searchTerm, setSearchterm] = React.useState('');\n  \n    const handleChange = event => {\n      setSearchterm(event.target.value);\n    }\n  \n    // React.useEffect(() => console.log(searchTerm), [searchTerm]);\n  \n    // get array of all recipes and filter them\n    const filteredRecipes = recipeNameIdList.filter(recipe => recipe.recipeName.toLowerCase().includes(searchTerm.toLowerCase()));\n    // const filteredRecipes = recipeNameIdList();\n\n    return (\n      <div className=\"sideBar\">\n        <NewRecipeButton clickedAddRecipe={clickedAddRecipe}/>\n        <Search changeSearch={handleChange}/>\n        <ListRecipes recipeList={filteredRecipes} selectRecipe={selectRecipe}/>\n      </div>\n    );\n}\n  \n  // Search Bar\nfunction Search({changeSearch}) {\n    return (\n      <input type=\"text\" id=\"searchRecipes\" onChange={changeSearch} className=\"searchBar\"/>\n    );\n}\n  \nfunction ListRecipes({recipeList, selectRecipe}) {\n    function clickRecipe (event) {\n        return selectRecipe(event.target.getAttribute(\"recipeid\"));\n    };\n\n    // display filtered list of recipes\n    return (\n        recipeList.map(function(recipe) {\n        return <li className=\"listItem\" key = {recipe.recipeID} recipeid={recipe.recipeID} onClick={clickRecipe}>{recipe.recipeName}</li>\n      })\n    );\n}\n  \nfunction NewRecipeButton({clickedAddRecipe}) {  \n    return (\n      <button type=\"button\" className=\"button\" id=\"newRecipeButton\" onClick={clickedAddRecipe}>New+</button>\n    )\n}\n\nexport default SideBar;\n  ","/Users/alexpun/Desktop/website/recipe/recipe/src/DisplayRecipeImage.js",["38"],"import React from 'react';\n\n\nfunction DisplayRecipeImage({recipeID}) {\n    return (\n        <div className=\"recipeImageContainer\">\n            <img className=\"recipeImage\" src={`https://recipephotostorage.s3-us-west-1.amazonaws.com/recipeImages/${recipeID}`}/>\n        </div>\n    )\n}\n\nexport default DisplayRecipeImage;\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":156,"column":8,"nodeType":"45","endLine":156,"endColumn":10,"suggestions":"46"},{"ruleId":"43","severity":1,"message":"47","line":8,"column":6,"nodeType":"45","endLine":8,"endColumn":24,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":7,"column":13,"nodeType":"51","endLine":7,"endColumn":130},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'ingredientList'. Either include it or remove the dependency array. If 'changeIngredientList' needs the current value of 'ingredientList', you can also switch to useReducer instead of useState and read 'ingredientList' in the reducer.","ArrayExpression",["54"],"React Hook React.useEffect has a missing dependency: 'getRecipes'. Either include it or remove the dependency array. If 'getRecipes' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["55"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},"Update the dependencies array to be: [ingredientList]",{"range":"60","text":"61"},"Update the dependencies array to be: [getRecipes, recipeNameIdList]",{"range":"62","text":"63"},[5144,5146],"[ingredientList]",[200,218],"[getRecipes, recipeNameIdList]"]