{"version":3,"sources":["SideBar.js","AddRecipePage.js","DisplayRecipeImage.js","DisplayRecipePage.js","App.js","serviceWorker.js","index.js"],"names":["Search","changeSearch","type","id","onChange","className","ListRecipes","recipeList","selectRecipe","clickRecipe","event","target","getAttribute","map","recipe","key","recipeID","recipeid","onClick","recipeName","NewRecipeButton","clickedAddRecipe","SideBar","recipeNameIdList","getRecipes","React","useEffect","useState","searchTerm","setSearchterm","filteredRecipes","filter","toLowerCase","includes","value","AddName","name","changeName","nameState","required","AddPicture","changeImg","for","accept","e","imageFile","File","files","AddTimeServings","preptime","cooktime","serves","changePreptime","changeCooktime","changeServings","preptimeInputState","cooktimeInputState","servingsInputState","AddIngredients","ingredientList","changeIngredientList","ingredientListState","IngredientInputList","removeIngredientPair","length","tempList","splice","ingredientNameInput","ingredientName","ingredientNum","ingredientAmountInput","ingredientAmount","toString","item","keyValue","indexOf","IngredientPairInput","changeIngredientName","changeIngredientAmount","ingredientNameInputState","ingredientAmountInputState","this","keyvalue","AddInstructions","instructionList","forEach","push","changeInstructionList","instructionListState","InstructionInputList","removeInstruction","editInstructionInput","instruction","instructionNum","console","log","inputInstruction","InstructionItem","instructNum","changeInput","changeInstructionValue","instructionValueState","AddRecipePage","deleteButton","deleteRecipe","submitRecipe","recipeImg","onSubmit","preventDefault","recipeFormData","FormData","newRecipe","document","getElementById","newIngredients","Array","from","getElementsByClassName","element","ingredients","instructions","append","JSON","stringify","entries","i","getNewRecipe","Object","DisplayRecipeImage","src","DisplayIngredients","ingredient","DisplayInstructions","EditRecipeButton","setMainPage","copyRecipe","DisplayRecipePage","copyOriginalRecipe","Header","MainPage","component","pageType","HomePage","App","recipesList","changeRecipeList","setNewRecipePromise","a","Promise","resolve","reject","setRecipe","recipeState","copyRecipePromise","then","useReducer","originalRecipe","update","$set","recipeId","Axios","method","url","res","data","setTimeout","get","setAttribute","header","parseInt","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8cf06452.chunk.js","sourcesContent":["import React from 'react';\n\n// controls search and listing recipes\nfunction SideBar({clickedAddRecipe, recipeNameIdList, selectRecipe, getRecipes}) {\n\n  React.useEffect(() => {\n    getRecipes();\n  }, [recipeNameIdList]);\n\n    const [searchTerm, setSearchterm] = React.useState('');\n  \n    const handleChange = event => {\n      setSearchterm(event.target.value);\n    }\n  \n    // React.useEffect(() => console.log(searchTerm), [searchTerm]);\n  \n    // get array of all recipes and filter them\n    const filteredRecipes = recipeNameIdList.filter(recipe => recipe.recipeName.toLowerCase().includes(searchTerm.toLowerCase()));\n    // const filteredRecipes = recipeNameIdList();\n\n    return (\n      <div className=\"sideBar\">\n        <NewRecipeButton clickedAddRecipe={clickedAddRecipe}/>\n        <Search changeSearch={handleChange}/>\n        <ListRecipes recipeList={filteredRecipes} selectRecipe={selectRecipe}/>\n      </div>\n    );\n}\n  \n  // Search Bar\nfunction Search({changeSearch}) {\n    return (\n      <input type=\"text\" id=\"searchRecipes\" onChange={changeSearch} className=\"searchBar\"/>\n    );\n}\n  \nfunction ListRecipes({recipeList, selectRecipe}) {\n    function clickRecipe (event) {\n        return selectRecipe(event.target.getAttribute(\"recipeid\"));\n    };\n\n    // display filtered list of recipes\n    return (\n        recipeList.map(function(recipe) {\n        return <li className=\"listItem\" key = {recipe.recipeID} recipeid={recipe.recipeID} onClick={clickRecipe}>{recipe.recipeName}</li>\n      })\n    );\n}\n  \nfunction NewRecipeButton({clickedAddRecipe}) {  \n    return (\n      <button type=\"button\" className=\"button\" id=\"newRecipeButton\" onClick={clickedAddRecipe}>New+</button>\n    )\n}\n\nexport default SideBar;\n  ","import React from 'react';\n\nfunction AddRecipePage({deleteRecipe, submitRecipe, recipe}) {\n    // pass in empty object if add new recipe with ID = -1\n    // pass in existing object if editing existing recipe\n\n    const [recipeImg, changeImg] = React.useState();\n\n    // get recipe from form\n    const getNewRecipe = () => {\n        let recipeFormData = new FormData();\n        let newRecipe = {};\n        newRecipe.name = document.getElementById(\"nameInput\").value;\n        newRecipe.preptime = document.getElementById(\"prepTime\").value;\n        newRecipe.cooktime = document.getElementById(\"cookTime\").value;\n        newRecipe.serves = document.getElementById(\"serves\").value;\n\n        // get ingredients\n        let newIngredients = {}\n        Array.from(document.getElementsByClassName(\"ingredientPairInput\")).forEach((element) => {\n            newIngredients[element.getElementsByClassName(\"ingredientInput\")[0].value] = element.getElementsByClassName(\"ingredientAmountInput\")[0].value;\n        })\n        newRecipe.ingredients = newIngredients;\n\n        newRecipe.instructions = [];\n        Array.from(document.getElementsByClassName(\"instructionItem\")).forEach((element) => {\n            newRecipe.instructions.push(element.getElementsByClassName(\"instructionInput\")[0].value);\n        })\n\n        newRecipe.id = recipe.id;\n        // recipeFormData.append(\"id\", recipe.id);\n        recipeFormData.append(\"recipe\", JSON.stringify(newRecipe));\n        recipeFormData.append(\"img\", recipeImg);\n\n        for (let i of recipeFormData.entries()) {\n            console.log(i);\n        }\n        submitRecipe(recipeFormData);\n    }\n\n    const submitForm = (event) => {\n        event.preventDefault();\n        getNewRecipe();\n    }\n\n    let deleteButton;\n    // need this function to prevent firing function on render\n    const deleteExistingRecipe = () => {\n        deleteRecipe(recipe.id);\n    }\n    if (recipe.id !== -1) {\n        deleteButton = <button type=\"button\" className=\"button\" id=\"deleteButton\" onClick={deleteExistingRecipe}>Delete Recipe</button>\n    }\n\n    return (\n      <div className=\"addRecipePage\">\n        <span className=\"title\">New Recipe</span>\n        {deleteButton}\n\n        <form className=\"addRecipeForm\" id = \"editRecipeForm\" onSubmit={submitForm}>\n            \n            <AddName name={recipe.name}/>\n            <AddPicture changeImg={changeImg}/>\n            <AddTimeServings preptime={recipe.preptime} cooktime={recipe.cooktime} serves={recipe.serves}/>\n    \n            <AddIngredients ingredientList={Object.entries(recipe.ingredients)}/>\n    \n            <AddInstructions instructionList={recipe.instructions}/>\n\n            <br></br>\n            <button type=\"submit\" className=\"submitButton button\" id=\"submitButton\">Submit Recipe</button>\n        </form>\n      </div>\n    )\n}\n\nfunction AddName ({name}) {\n    React.useEffect(() => {\n        changeName(name);\n    }, [name])\n\n    // control state of name input\n    const [nameState, changeName] = React.useState(name);\n\n    const handleChange = event => {\n        changeName(event.target.value);\n    }\n\n    return (\n        <div>\n            <label>Name</label>\n            <input type=\"text\" className=\"newRecipeInput\" id=\"nameInput\" value={nameState} onChange={handleChange} required/>\n        </div>\n\n    )\n}\n\nfunction AddPicture({changeImg}) {\n    const setImg = e => {\n        let imageFile = new File([e.target.files[0]], \"img\");\n        changeImg(imageFile);\n    }\n\n    return (\n        <div>\n            <label for=\"img\">Picture:</label>\n            <input type=\"file\" id=\"img\" name=\"recipeImg\" accept=\"image/*\" onChange={setImg}/>\n        </div>\n\n    )\n}\n\nfunction AddTimeServings ({preptime, cooktime, serves}) {\n    React.useEffect(() => {\n        changePreptime(preptime);\n        changeCooktime(cooktime);\n        changeServings(serves);\n    }, [preptime, cooktime, serves]);\n\n    // control state of inputs\n    const [preptimeInputState, changePreptime] = React.useState(preptime);\n\n    const inputPreptime = (event) => {\n        changePreptime(event.target.value);\n    }\n\n    const [cooktimeInputState, changeCooktime] = React.useState(cooktime);\n\n    const inputCooktime = (event) => {\n        changeCooktime(event.target.value);\n    }\n\n    const [servingsInputState, changeServings] = React.useState(serves);\n\n    const inputServings = (event) => {\n        changeServings(event.target.value);\n    }\n\n    return (\n        <div className=\"smallInputs\">\n            <label>Prep Time:</label>\n            <input type = \"text\" className = \"newRecipeInput\" value={preptimeInputState} onChange={inputPreptime} id =\"prepTime\" required/>\n  \n            <label>Cook Time:</label>\n            <input type = \"text\" className = \"newRecipeInput\" value={cooktimeInputState} onChange={inputCooktime} id =\"cookTime\" required/>\n  \n            <label>Serves:</label>\n            <input type = \"text\" className = \"newRecipeInput\" value={servingsInputState} onChange={inputServings} id =\"serves\" required/>\n        </div>\n    )\n}\n  \nfunction AddIngredients ({ingredientList}) {\n    React.useEffect(() => {\n        changeIngredientList(ingredientList);\n    }, []);\n\n    // control number of ingredient inputs\n    const [ingredientListState, changeIngredientList] = React.useState(ingredientList);\n\n    const addNewIngredient = () => {\n        changeIngredientList([...ingredientListState, [\"Ingredient \" + (ingredientListState.length+1).toString(), \"\"]]);\n    }\n\n    const removeIngredientPair = (event) => {\n        if (ingredientListState.length > 1)\n        {\n            let tempList = [...ingredientListState];\n            tempList.splice(event.target.getAttribute('keyvalue'), 1);\n            changeIngredientList(tempList);\n        }\n        else\n            return;\n    }\n\n    const ingredientNameInput = (ingredientName, ingredientNum) => {\n        let tempList = [...ingredientListState];\n        tempList[ingredientNum][0] = ingredientName;\n    }\n\n    const ingredientAmountInput = (ingredientAmount, ingredientNum) => {\n        let tempList = [...ingredientListState];\n        tempList[ingredientNum][1] = ingredientAmount;\n    }\n\n    return (\n        <div className=\"ingredientsContainer\">\n            <span>Ingredient</span>\n            <span>Amount</span>\n            <IngredientInputList ingredientList={ingredientListState} removeIngredientPair={removeIngredientPair} \n                                 ingredientNameInput={ingredientNameInput} ingredientAmountInput={ingredientAmountInput}/>\n            <br></br>\n            <button type=\"button\" onClick={addNewIngredient}>New Ingredient</button>\n        </div>\n    )\n}\n\nfunction IngredientInputList ({ingredientList, removeIngredientPair, ingredientNameInput, ingredientAmountInput}) {\n    return (\n        ingredientList.map((item) => {\n            const keyValue = ingredientList.indexOf(item);\n            return <IngredientPairInput key={keyValue} keyValue={keyValue} ingredientName={item[0]} \n                                        ingredientAmount={item[1]} removeIngredientPair={removeIngredientPair} \n                                        ingredientNameInput={ingredientNameInput} ingredientAmountInput={ingredientAmountInput}/>\n        })\n    )\n}\n\nfunction IngredientPairInput ({keyValue, ingredientName, ingredientAmount, removeIngredientPair, ingredientNameInput, ingredientAmountInput}) {\n    React.useEffect(() => {\n        changeIngredientName(ingredientName);\n        changeIngredientAmount(ingredientAmount);\n    }, [ingredientName, ingredientAmount]);\n\n    const [ingredientNameInputState, changeIngredientName] = React.useState(ingredientName || \"\");\n\n    const inputIngredientName = (event) => {\n        changeIngredientName(event.target.this);\n        ingredientNameInput(event.target.value, keyValue);\n    }\n\n    const [ingredientAmountInputState, changeIngredientAmount] = React.useState(ingredientAmount || \"\");\n\n    const inputIngredientAmount = (event) => {\n        changeIngredientAmount(event.target.this);\n        ingredientAmountInput(event.target.value, keyValue);\n    }\n\n    return (\n        <div className=\"ingredientPairInput\">\n            <input type = \"text\" className = \"newRecipeInput ingredientInput\" value={ingredientNameInputState} onChange={inputIngredientName} required/>\n            <input type = \"text\" className = \"newRecipeInput ingredientAmountInput\" value={ingredientAmountInputState} onChange={inputIngredientAmount}required/>\n            <button type=\"button\" className=\"removeButton\" keyvalue={keyValue} onClick={removeIngredientPair}>X Remove Ingredient</button>\n        </div>\n        )\n}\n\nfunction AddInstructions ({instructionList}) {\n    // set to array of arrays to track each item by reference\n    React.useEffect(() => {\n        let tempList = [];\n        instructionList.forEach((item) => {\n            tempList.push([item]);\n        });\n        changeInstructionList(tempList);\n    }, [instructionList]);\n\n    const [instructionListState, changeInstructionList] = React.useState(instructionList);\n\n    const addNewInstruction = () => {\n        changeInstructionList([...instructionListState, [\"Instruction \" + (instructionListState.length+1).toString()]]);\n        console.log(instructionListState);\n    }\n\n    const editInstructionInput = (instruction, instructionNum) => {\n        let tempList = [...instructionListState];\n        tempList[instructionNum][0] = instruction;\n        console.log(tempList);\n        changeInstructionList(tempList);\n    }\n\n    const removeInstruction = (event) => {\n        if (instructionListState.length > 1)\n        {\n            let tempList = [...instructionListState];\n            tempList.splice(event.target.getAttribute('keyvalue'), 1);\n            changeInstructionList(tempList);\n        }\n        else\n            return;\n    }\n\n    return (\n        <div className=\"instructionsContainer\">\n            <span id=\"instructionHeader\">Instructions:</span>\n            <InstructionInputList instructionList={instructionListState} removeInstruction={removeInstruction} \n                                  editInstructionInput={editInstructionInput}/>\n            <button type=\"button\" onClick={addNewInstruction}>New Instruction</button>\n        </div>\n    )\n}\n\nfunction InstructionInputList ({instructionList, inputInstruction, removeInstruction, editInstructionInput}) {\n    return (\n        instructionList.map(instruction => <InstructionItem key={instructionList.indexOf(instruction)} \n                                                    instructNum={instructionList.indexOf(instruction)}\n                                                    instruction={instruction} instructionList={instructionList} \n                                                    changeInput={inputInstruction} removeInstruction={removeInstruction}\n                                                    editInstructionInput={editInstructionInput}/>)\n        )\n}\n\nfunction InstructionItem ({instructNum, instruction, removeInstruction, editInstructionInput}) {\n    React.useEffect(() => {\n        changeInstructionValue(instruction);\n    }, [instruction]);\n\n    const [instructionValueState, changeInstructionValue] = React.useState(instruction);\n\n    const inputInstruction = (event) => {\n        changeInstructionValue(event.target.value);\n        editInstructionInput(event.target.value, instructNum);\n    }\n\n    return (\n    <div className=\"instructionItem\">\n        <span>{instructNum+1}.</span>\n        <br></br>\n        <textarea className=\"instructionInput\" value={instructionValueState} onChange={inputInstruction} required></textarea>\n        <br></br>\n        <button type=\"button\" className=\"removeButton\" keyvalue={instructNum} onClick={removeInstruction}>X Remove Instruction</button>\n    </div>\n    )\n}\n\nexport default AddRecipePage;\n","import React from 'react';\n\n\nfunction DisplayRecipeImage({recipeID}) {\n    return (\n        <div className=\"recipeImageContainer\">\n            <img className=\"recipeImage\" src={`https://recipephotostorage.s3-us-west-1.amazonaws.com/recipeImages/${recipeID}`}/>\n        </div>\n    )\n}\n\nexport default DisplayRecipeImage;\n","import React from 'react';\nimport DisplayRecipeImage from './DisplayRecipeImage';\n\nfunction DisplayRecipePage({recipe, setMainPage, copyOriginalRecipe}) {\n\n    const copyRecipe = () => {\n        copyOriginalRecipe(recipe);\n    }\n\n    return (\n        <div className=\"displayRecipePage\">\n            <div className=\"titleImageContainer\">\n                <DisplayRecipeImage recipeID={recipe.id}/>\n                <h1 className=\"title\">{recipe.name}</h1>\n            </div>\n            <div className=\"displaySmallContainer\">\n                <span>Prep Time: {recipe.preptime}</span>\n                <span>Cook Time: {recipe.cooktime}</span>\n                <span>Serves: {recipe.serves}</span>\n            </div>\n            <DisplayIngredients ingredients={Object.entries(recipe.ingredients)}/>\n            <DisplayInstructions instructions={recipe.instructions}/>\n            <EditRecipeButton setMainPage={setMainPage} copyRecipe={copyRecipe}/>\n        </div>\n    )\n}\n\nfunction DisplayIngredients ({ingredients}) {\n    return (\n        <div className=\"displayIngredients\">\n            <header>Ingredients</header>\n            <ul>\n                {/* ingredient[0] is name of ingredient - ingredient[1] is amount of ingredient */}\n                {ingredients.map(ingredient => <li key={ingredient[0]}>{ingredient[1]} {ingredient[0]}</li>)}\n            </ul>\n        </div>\n    )\n}\n\nfunction DisplayInstructions ({instructions}) {\n    return (\n        <div className=\"displayInstructions\">\n            <header>Instructions</header>\n            <ol>\n                {instructions.map(instruction => <li key={instructions.indexOf(instruction)}>{instruction}</li>)}\n            </ol>\n        </div>\n    )\n}\n\nfunction EditRecipeButton ({setMainPage, copyRecipe}) {\n    const clickEdit = () => {\n        setMainPage(\"EditRecipePage\")\n        copyRecipe();\n    };\n    return (\n        <button type=\"button\" className=\"button\" id=\"editRecipeButton\" onClick={clickEdit}>Edit Recipe</button>\n    )\n}\n\n\nexport default DisplayRecipePage;\n","import React from 'react';\nimport update from 'immutability-helper';\nimport './App.css';\nimport SideBar from './SideBar';\nimport AddRecipePage from './AddRecipePage';\nimport DisplayRecipePage from './DisplayRecipePage';\nimport Axios from 'axios';\n\nfunction App() {\n\n  const getAsyncRecipes = () => \n    new Promise(resolve => \n      setTimeout(\n        () => resolve(    \n      Axios({\n      method: \"GET\",\n      url: \"https://recipe-nodejs.herokuapp.com/getRecipes\",\n    }).then(res => {\n      changeRecipeList(res.data);\n    })), 100));\n\n  // sets which page to show\n  const [pageType, setMainPage] = React.useState(\"Home\");\n\n  const [recipesList, changeRecipeList] = React.useState([]);\n\n  async function setNewRecipePromise() {\n    return new Promise((resolve, reject) => {\n      setRecipe({\n        name: \"\",\n        preptime: \"\",\n        cooktime: \"\",\n        serves: \"\",\n        ingredients: {\"Ingredient 1\": \"\"},\n        instructions: [\"Instruction 1\"],\n        id: -1\n      });\n      resolve(recipeState);\n    })\n  }\n\n  function copyRecipePromise(recipe) {\n    return new Promise((resolve, reject) => {\n      copyOriginalRecipe(recipe);\n      resolve(\"yes\");\n      reject(\"no\");\n    });\n  }\n\n  // when add recipe button is clicked\n  async function clickedAddRecipe() {\n    copyRecipePromise({name: \"\",\n                      preptime: \"\",\n                      cooktime: \"\",\n                      serves: \"\",\n                      ingredients: {\"Ingredient 1\": \"\"},\n                      instructions: [\"Instruction 1\"],\n                      id: -1}).then(setNewRecipePromise());\n\n    setMainPage(\"EditRecipePage\");\n  }\n\n  const [recipeState, setRecipe] = React.useReducer(recipeReducer, {name: \"\",\n                                                                    preptime: \"\",\n                                                                    cooktime: \"\",\n                                                                    serves: \"\",\n                                                                    ingredients: {\"Ingredient 1\": \"\"},\n                                                                    instructions: [\"Instruction 1\"],\n                                                                    id: -1});\n\n  function recipeReducer(recipeState, recipe) {\n    // return (update(recipe, {$set: recipe}));\n    let newRecipe = {};\n    newRecipe.name = recipe.name;\n    newRecipe.preptime = recipe.preptime;\n    newRecipe.cooktime = recipe.cooktime;\n    newRecipe.serves = recipe.serves;\n    newRecipe.ingredients = recipe.ingredients;\n    newRecipe.instructions = [...recipe.instructions]\n    newRecipe.id = recipe.id;\n    return newRecipe;\n  }\n\n  const [originalRecipe, copyOriginalRecipe] = React.useReducer(copyOriginalRecipeReducer, {name: \"\",                                                                                            preptime: \"\",\n                                                                                            cooktime: \"\",\n                                                                                            serves: \"\",\n                                                                                            ingredients: {\"Ingredient 1\": \"\"},\n                                                                                            instructions: [\"Instruction 1\"],\n                                                                                            id: -1});\n\n  function copyOriginalRecipeReducer(originalRecipe, recipe) {\n    return (update(recipe, {$set: recipe}));\n  }\n\n  // submit recipe to MySql db\n  const submitRecipe = (newRecipe) => {\n    if (newRecipe.id === -1) {\n      document.getElementById(\"submitButton\").setAttribute(\"disabled\", true);\n      Axios({\n        method: \"POST\",\n        url: \"https://recipe-nodejs.herokuapp.com/addRecipe\",\n        header: {\n          \"content-type\": \"multipart/form-data\"\n        },\n        data: newRecipe\n      }).then(res => {\n        selectRecipe(parseInt(res.data));\n      });\n      // .catch(alert(\"Sorry, something went wrong! :(\"));\n    }\n    else if (newRecipe.get(\"img\") || (newRecipe.get(\"recipe\") !== JSON.stringify(originalRecipe))) {\n      document.getElementById(\"submitButton\").setAttribute(\"disabled\", true);\n      Axios({\n        method: \"POST\",\n        url: \"https://recipe-nodejs.herokuapp.com/addRecipe\",\n        header: {\n          \"content-type\": \"multipart/form-data\"\n        },\n        data: newRecipe\n      }).then(res => {\n        selectRecipe(parseInt(res.data));\n      });\n      // .catch(alert(\"Sorry, something went wrong! :(\"));\n    }\n    else {\n      selectRecipe(JSON.parse(newRecipe.get(\"recipe\")).id);\n    }\n  } \n\n  const deleteRecipe = (recipeId) => {\n    if (recipeId > 0) {\n      Axios({\n        method: \"POST\",\n        url: \"https://recipe-nodejs.herokuapp.com/deleteRecipe\",\n        header: {\n          \"content-type\": \"application/x-www-form-urlencoded\"\n        },\n        data: {\"recipeId\": recipeId}\n      }).then(res => {\n        setMainPage(\"Home\");\n      });\n    }\n  }\n\n  // selects recipe by filtering\n  function selectRecipe(recipeId) {\n    Axios({\n      method: \"GET\",\n      url: \"https://recipe-nodejs.herokuapp.com/selectRecipe?recipeId=\"+recipeId.toString(),\n    }).then(res => {\n      setRecipe(res.data);\n      setMainPage(\"DisplayRecipe\");\n    });\n  }\n  return (\n    <>\n      <Header/>\n      <div className=\"container\">\n        <SideBar clickedAddRecipe={clickedAddRecipe} recipeNameIdList={recipesList} selectRecipe={selectRecipe} getRecipes={getAsyncRecipes}/>\n        <MainPage pageType={pageType} submitRecipe={submitRecipe} recipe={recipeState} setMainPage={setMainPage} copyOriginalRecipe={copyOriginalRecipe} deleteRecipe={deleteRecipe}/>\n      </div>\n    </>\n  );\n}\n\n// placeholder header for now\nfunction Header() {\n  return (\n      <div className=\"header\">\n        <span>Pungry</span>\n      </div>\n  )\n}\n\nfunction MainPage({pageType, submitRecipe, recipe, setMainPage, copyOriginalRecipe, deleteRecipe}) {\n  // selects which page to render\n  \n  let component;\n  switch (pageType) {\n    case \"Home\":\n      component = <HomePage/>\n      break;\n    case \"EditRecipePage\": // for both edit and add recipe\n      component = <AddRecipePage deleteRecipe={deleteRecipe} submitRecipe={submitRecipe} recipe={recipe}/>\n      break;\n    case \"DisplayRecipe\":\n      component = <DisplayRecipePage recipe={recipe} setMainPage={setMainPage} copyOriginalRecipe={copyOriginalRecipe}/>\n      break;\n    default:\n      break;\n  }\n  return (\n    <div className=\"mainPage\">\n      {component}\n    </div>\n  )\n}\n\nfunction HomePage() {\n  return (\n    <span>Home Page</span>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}